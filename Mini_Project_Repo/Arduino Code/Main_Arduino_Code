// --------------------- Mini Project 1: Arduino Code ----------------------------
// This code will start out by running the Raspberry Pi camera which will be used to
// read an aruco marker. This marker will be moved to each corner of the cameras
// available sight and then send the Pi a quadrant number based off of which corner
// the marker is in. Once the Pi receives the quadrant number, it will que up the I2C
// protocol and send the Arduino that quadrant number. Using a PI controller,
// the Arduino will then move the motor to the appropriate quadrant.
// The PI controller was tuned using a simulink model. The Arduino then sends
// back it's exact location to the Pi via I2C.
// The Pi will display both the current quadrant and the one that is being
// read from the Pi camera.
// ------------------------------------------------------------------------------------
// Hardware requirements:
// Raspberry Pi, Arduino and 3 wires to connect them together for the I2C link.
// LCD display, shield motor controller, motor, battery monitor, switch, and battery.
// Raspberry Pi camera and aruco marker.
// Various cables and wires for connecting everything.
// ------------------------------------------------------------------------------------


//The purpose of this code is to turn a wheel to a given quadrant using a PI controller

#include <Encoder.h>
#include "Arduino.h"
#include <Wire.h>

//Variables

// varaibles for serial communication
String InputString = ""; // a string to hold incoming data
bool StringComplete = false;

//Encoder variables
int ENCA = 3;               // Encoder Channel A (Yellow) on int pin 2
int ENCB = 2;               // Encoder Channel B (White) on pin X 
Encoder enc(ENCA, ENCB);

//Constants
const float Pi = 3.14159;
float umax = 7.5;           //Max battery voltage
#define SLAVE_ADDRESS 0x04

//Motor pins
int enable = 4;
int motor1Volt = 9;
int motor2Volt = 10;
int motor1Dir = 7;
int motor2Dir = 8;
int statusFlag = 12;

//Motor Contol
float m1vCommand = 0;
float m2vCommand = 0;

//Controller
  float Kp = 1.25; // v/rad ----- 1.25
  float Ki = 0.000081;     //----- 0.00008
  float I = 0;
  int quad = 0;
  int refVal = 0;
  int currentVal = 0;
  float radPosition = 0;
  float error = 0;
  float radError = 0;
  float output = 0;
  int Ts = 0;
  int Tc = 0;
  bool encoderResetFlag = true;

void setup() {
  Serial.begin(115200);
  // Reserve 200 bytes for the inputString:
  InputString.reserve(200);
  Serial.println("Ready!"); // Let anyone on the other end of the serial line know that Arduino is ready
  
  //Define callbacks for i2c communication
  Wire.begin(SLAVE_ADDRESS);  // For I2C
  Wire.onReceive(receiveData);
  Wire.onRequest(sendData);
  
  //Configures pins
  pinMode(ENCA, INPUT_PULLUP);
  pinMode(ENCB, INPUT);
  pinMode(enable, OUTPUT);
  pinMode(motor1Dir, OUTPUT);
  pinMode(motor2Dir, OUTPUT);
  pinMode(motor1Volt, OUTPUT);
  pinMode(motor2Volt, OUTPUT);
  pinMode(statusFlag, INPUT);
  pinMode(13, OUTPUT);  // For I2C

  //Set initial vlaues
  digitalWrite(enable, HIGH);
  //Low = forward, high = reverse;
  digitalWrite(motor1Dir, LOW);
  analogWrite(motor1Volt, m1vCommand);
}

void loop() {
  //Clears flag for MATLAB serial reading
  if (StringComplete) {
    StringComplete = false;
  }
  
  if(millis() > 1000){
  //Sets reference value given quadrant from PY
  if(quad == 1) {
    //Fixes encoder counts based on previous position of motor
    if(encoderResetFlag == true) {
      refVal = 0; //counts
    } else {
      refVal = 3200; //counts
    } 
  }
  else if(quad == 2){
    refVal = 800; //counts
    encoderResetFlag = true;
    }
  else if(quad == 3) {
    refVal = 1600; //counts
    encoderResetFlag = false;
  }
  else if(quad == 4) {
    refVal = 2400; //counts
    encoderResetFlag = false;
  }
  else refVal = 0;
  
  //Gets current position of motor
  currentVal = enc.read(); //counts
  
  //Calculates error
  error = refVal - currentVal; //counts
  radError = error * 2 * PI / 3200; //radians
  
  //Provides error bounds
  if(abs(error) <= 25){
    radError = 0;
    //Sets encoder counts back to zero if motor has done one full revolution
    if(currentVal > 3150) {
      enc.write(0);
      encoderResetFlag = true;
    }
  }
 
  //Gets integral value
  I = I + (Ts * radError);
  //Calculates output error in volts
  output = (Kp * radError) + (Ki * I); //Volts

  //Keeps output confined to voltage range of battery
  if (abs(output)> umax) {
    output = sgn(output)* umax; //Volts
    radError = sgn(radError)* min(umax / Kp, abs(radError)); //Radians
    I = (output - (Kp * error)) / Ki;
  }
  
  //Sets motor direction based on if error is pos or neg
  if(sgn(error) == -1) {
    digitalWrite(motor1Dir, HIGH);
  }
  else {
    digitalWrite(motor1Dir, LOW);
  }

  //turns volts into PWM value
  m1vCommand = abs(output) / 7.6 * 256; //PWM
  
  //Writes PWM value to motor
  analogWrite(motor1Volt, m1vCommand);
  
  //Updates times
  Ts = millis() - Tc;
  Tc = millis();

  //Opdates position from counts to radians
  radPosition = currentVal * 2 * PI / 3200; //Radians

//  Serial.print(millis());
//  Serial.print("\t");
//  Serial.print(radPosition);
//  Serial.println(" ");

  //Used to stop MATLAB simulation after 7 seconds
//  if(millis() > 7000) {
//      Serial.println("Finished");
//      stopFlag = true;
//    }
  }
}


//***FUNCTIONS***

//Function to return the sign of the values
int sgn(int val) {
  if (val < 0) return -1;
  if (val == 0) return 0;
  return 1;
}

//Function used to read in data to MATLAB
void serialEvent() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    // add it to the inputString:
    InputString += inChar;
    // if the incoming character is a newline, set a flag
    // so the main loop can do something about it:
    if (inChar == '\n') {
      StringComplete = true;
    }
  }
}

//Function used to get value of quad from PY
void receiveData(int byteCount){
  Serial.print("data received: ");
  while(Wire.available()) {
    quad = Wire.read(); //quad 1,2,3,4
    Serial.print(quad);
    Serial.print(' ');
  }
  Serial.println(' ');  
}

//Callback for sending datamm
void sendData(){
  Wire.write(quad);
}
