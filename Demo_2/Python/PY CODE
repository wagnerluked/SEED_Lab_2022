#Jamie Armstrong
#EENG350 Demo 2 Computer Vision Subsystem
#Angle and Distance Detection
#This program serves an essential role in our Demo 2 tasks. The program detects any Aruco markers that enter the Pi camera's field of
#view, and determines the distance between the camera and the marker, as well as the angle between the central camera axis and the marker.
#From here, I2C communication is utilized to transmit the target angle to the Arduino contrller, and provide instruction on when to stop
#moving forward. In many respects it is a modification of our previous computer vision code. 

import adafruit_character_lcd.character_lcd_rgb_i2c as character_lcd
from picamera.array import PiRGBArray
from picamera import PiCamera
import cv2.aruco as aruco
import smbus2
import numpy as np
import board
import busio
import time
import cv2

bus = smbus2.SMBus(1)
address = 0x04
desiredPos = 0
offSet = 0

# This is used to write a value to the arduino via I2C
def writeText(value):
    bus.write_byte_data(address, offSet, value)
    return -1

#initialize the camera, grab reference to raw camera capture
camera = PiCamera()

width, height = (640, 480)
camera.resolution = (width, height)
camera.framerate = 20
rawCapture = PiRGBArray(camera, size=camera.resolution)

#camera to warmup
time.sleep(0.1)

#set ISO to desired value
camera.iso = 100

#wait for automatic gain control to settle
time.sleep(2)

#now fix values
camera.shutter_speed = camera.exposure_speed
camera.exposure_mode = 'off'
g = camera.awb_gains
camera.awb_mode = 'off'
camera.awb_gains = g

#camera parameters used later in determining marker pose, and subsequently distance/angle
K = np.array([[426.7, 0, 332], [0, 412, 272.3], [0, 0, 1]])
distCoeffs = np.array([-.010, .045, -.007, .003, -.163])

#dictionary and parameters
aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_250)
parameters = aruco.DetectorParameters_create()
MARKER_LENGTH = 5  # cm

#capture frames from the camera
for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
    image = frame.array

    #clear stream
    rawCapture.truncate(0)

    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    #detect markers
    corners, ids, rejectedImgPoints = aruco.detectMarkers(gray, aruco_dict, parameters=parameters)

    #estimate marker pose
    rvecs, tvecs, _ = aruco.estimatePoseSingleMarkers(corners, markerLength=MARKER_LENGTH, cameraMatrix=K, distCoeffs=distCoeffs)

    if ids is None: #check for markers appearing in frame
        pass
    
    else:
        rvec = rvecs[0]
        tvec = tvecs[0]
        
        #angle and distance detection
        phi = (-1) * np.arctan2(tvec[0,0], tvec[0,2])
        rho = tvec[0][2]  #interprets Z distance of translation vector as distance from camera in cm
        phi_cnts = int(np.rad2deg(phi) * 3200 / 360) #get phi into an integer representing encoder counts to be sent to Arduino
        #This will send movement commands to Arduino controller via I2C, offSet value determines state of Arduino FSM by changing a single bit
        if (ids != None): #if a marker appears in frame, interpret phi_cnts as target angle
            if(phi_cnts < 0): #negative angle, corresponds to inversion of calculations in Arduino code
                offSet = 0
                offSet = int(offSet)
                phi_cnts = abs(phi_cnts)
            else: #positive angle
                offSet =  1
                offSet = int(offSet)
                phi_cnts = abs(phi_cnts)
        if (rho < 30): #"stop" bit is sent, halting forward movement
            offSet = 2
            offSet = int(offSet)
        if(ids is None): #if no markers present, set offSet=3, corresponding to searching state
            offSet = 3
            offSet = int(offSet)
        try:                       #Added for error handling
            writeText(phi_cnts)
        except:                    #Added for error handling
            writeText(phi_cnts)
            

    cv2.imshow('frame', gray)  #display video stream in window
    if cv2.waitKey(1) == ord('q'):
        break #close window
     
cv2.destroyAllWindows() #end of program



